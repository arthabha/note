{"./":{"url":"./","title":"loveagri","keywords":"","body":"每天记录一点点 每天记录一点点，每天提高一点点 all right reserved，powered by Gitbook该文件修订时间： 2019-01-18 21:57:39 "},"Nginx/Mac开机自启动NGINX.html":{"url":"Nginx/Mac开机自启动NGINX.html","title":"Mac开机自启动NGINX","keywords":"","body":"Mac开机自启动NGINX和PHP Mac开机自启动NGINX和PHP 开机启动nginx: 在 /Library/LaunchDaemons/ 目录新建 org.macports.nginx.plist 文件: Label org.macports.nginx ProgramArguments /usr/local/bin/nginx KeepAlive 加载配置:launchctl load -w /Library/LaunchDaemons/org.macports.nginx.plist 开机启动php: 在 /Library/LaunchDaemons/ 目录新建 org.php.php-fpm.plist 文件: Label org.php.php-fpm ProgramArguments /usr/sbin/php-fpm KeepAlive 加载配置:launchctl load -w /Library/LaunchDaemons/org.php.php-fpm.plist Reference: launchd.plist-- System wide and per-user daemon/agent configuration files 每天记录一点点，每天提高一点点 all right reserved，powered by Gitbook该文件修订时间： 2019-01-18 21:57:39 "},"Nginx/nginx编译安装参数.html":{"url":"Nginx/nginx编译安装参数.html","title":"nginx编译安装参数","keywords":"","body":"NGINX编译安装 --prefix=/usr/local/Cellar/nginx/1.15.8 --sbin-path=/usr/local/Cellar/nginx/1.15.8/bin/nginx --with-cc-opt='-I/usr/local/opt/pcre/include -I/usr/local/opt/openssl/include' --with-ld-opt='-L/usr/local/opt/pcre/lib -L/usr/local/opt/openssl/lib' --conf-path=/usr/local/etc/nginx/nginx.conf --pid-path=/usr/local/var/run/nginx.pid --lock-path=/usr/local/var/run/nginx.lock --http-client-body-temp-path=/usr/local/var/run/nginx/client_body_temp --http-proxy-temp-path=/usr/local/var/run/nginx/proxy_temp --http-fastcgi-temp-path=/usr/local/var/run/nginx/fastcgi_temp --http-uwsgi-temp-path=/usr/local/var/run/nginx/uwsgi_temp --http-scgi-temp-path=/usr/local/var/run/nginx/scgi_temp --http-log-path=/usr/local/var/log/nginx/access.log --error-log-path=/usr/local/var/log/nginx/error.log --with-debug --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_degradation_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-ipv6 --with-mail --with-mail_ssl_module --with-pcre --with-pcre-jit --with-stream --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module 来brew install nginx的默认参数配置 每天记录一点点，每天提高一点点 all right reserved，powered by Gitbook该文件修订时间： 2019-01-18 21:57:39 "},"npm/install-npm-server.html":{"url":"npm/install-npm-server.html","title":"install-npm-server","keywords":"","body":"Link npm 私服工具verdaccio 搭建(一) | npm 私服工具verdaccio 搭建(二) | NodeJS学习：搭建私有NPM | pm2 status errored | 记录windows环境下用verdaccio搭建npm私有库 | gitlab之webhook自动部署 1.install node 下载最新的node环境，下载地址：https://nodejs.org/en/download/ #!/bin/bash wget https://nodejs.org/dist/v10.14.1/node-v10.14.1-linux-x64.tar.xz tar -zxvf node-v10.14.1-linux-x64 cp node-v10.14.1-linux-x64 /usr/local/node 2.安装verdaccio 加上–unsafe-perm的原因是防止报grywarn权限的错。 npm install -g verdaccio --unsafe-perm 3. 配置 3.1. 修改配置文件 verdaccio 的特点是，你在哪个目录运行，它的就会在对应的目录下创建自己的文件。目录下默认有两个文件：config.yaml和storage，htpasswd 是添加用户之后自动创建的； 由于第一次启动默认的config.xml文件是从原始文件default.yaml拷贝而来，可先修改verdaccio 原始的default.yaml。 地址：verdaccio 安装目录/conf/ default.yaml。 打开默认启动的config.yaml文件。 vim /home/admin/.config/verdaccio/config.yaml 在配置文件最后添加监听端口，配置文件详解请见文末尾 listen: 0.0.0.0:4873 # listen on all addresses 1 3.2. 对外开放4873端口 verdaccio继承了sinopia，端口号4873依然不变。 firewall-cmd --state # 先查看防火墙状态， service firewalld start # 开启防火墙: firewall-cmd --zone=public --add-port=4873/tcp –permanent #开放4873端口 firewall-cmd --reload #重新载入 firewall-cmd --zone=public --query-port=4873/tcp #查看是否添加成功 4.启动verdaccio 4.1.verdaccio直接启动 命令： verdaccio 1 // 显示信息， 第一句是配置文件的地址， 第二句，给了我们地址，访问便可以看到我们的私服已经搭建成功了。 目前还没有往上发布过包，所以没有任何包的信息。当我们打开页面还可以看到服务器这边有访问记录，控制台的日志一直在打。 verdaccio doesn‘t need superuser privileges. Don‘t run it und warn — config file - /home/admin/.config/verdaccio/config.yaml warn — http address - http://localhost:4873/ - verdaccio/ 4.2 pm2守护verdaccio进程 利用第一种方法虽然可以正常启动和使用verdaccio，但不建议用这种方式启动verdaccio，我们可以用pm2来使用pm2对verdaccio进程进行托管启动。 安装pm2并使用pm2启动verdaccio，使用pm2托管的进程可以保证进程永远是活着的，尝试通过kill -9去杀verdaccio的进程发现杀了之后又自动启起来。推荐使用此种方式启动verdaccio. 4.2.1安装pm2 npm install -g pm2 --unsafe-perm 1 4.2.2使用pm2启动verdaccio pm2 start verdaccio 1 4.2.3 查看pm2 守护下的进程verdaccio的实时日志 pm2 show verdaccio1 通过这个命令我们可以从下图中看到所有verdaccio的所有信息，打开 out log path查看进程输出日志,出现错误时候也可以打开error log来查看错误日志。 实时查看该路径下的日志命令： tail -f /home/admin/.pm2/logs/verdaccio-out-0.log1 添加用户 npm adduser --registry http://192.168.XX.XX:4873 //后面是我们的私服地址 类似如下： Username: lk Password: Email: (this IS public) lk@qq.com Logged in as rong on http://192.168.XX.XX:4873/. 然后在verdaccion启动页面尝试登录即可，默认登录后有发布包的权限。(这里可以通过修改config.yaml配置文件来对权限进行设置)、 到这里服务器端的搭建就完毕了，下篇我们来介绍客户端如何使用。 每天记录一点点，每天提高一点点 all right reserved，powered by Gitbook该文件修订时间： 2019-01-18 21:57:39 "},"npm/npm-update.html":{"url":"npm/npm-update.html","title":"npm-update","keywords":"","body":"Npm使用npm-check选择升级所有可更新包(全局+局部) + 项目单个依 原文地址：https://blog.csdn.net/pcaxb/article/details/81773475 1.安装npm-check： （全局目录安装） npm install -g npm-check 2.npm 全局更新包 (全局目录) npm-check -u -g 通过上下键可以移动光标，使用空格键可以选择需要处理的包，回车直接进行处理。 3.npm更新某个项目的包 （项目目录） npm-check -u 通过上下键可以移动光标，使用空格键可以选择需要处理的包，回车直接进行处理。 通过npm-check -u 就可以，不需要--save就可以直接更新package.json里面的内容 4.npm 更新单个全局包 npm update -g 5.npm 更新 项目 生产环境依赖包 npm update --save 6.npm 更新 项目 开发环境依赖包 npm update --save-dev 7.npm 查找全局安装过的包 每天记录一点点，每天提高一点点 all right reserved，powered by Gitbook该文件修订时间： 2019-01-16 22:25:03 "},"php/Mac编译安装phalcon.html":{"url":"php/Mac编译安装phalcon.html","title":"Mac编译安装phalcon","keywords":"","body":"linux下编译安装最新版phalcon centos下PHP7添加phalcon扩展 linux下编译安装phalcon 1、下载源码包 phalcon包 git clone --depth=1 git://github.com/phalcon/cphalcon.git ​ 进入目录 运行命令： cd build 执行安装文件 提示需要指定PHP的配置文件 运行命令： ./install --php-config /usr/local/php/bin/php-config --phpize /usr/local/php/bin/phpize 安装过程可能中断，提示需要re2c 然后去下载 运行命令： wget https://jaist.dl.sourceforge.net/project/re2c/old/re2c-0.13.4.tar.gz ​ brew install automake #安装aclocal命令 解压，编译安装。 然后重新再执行phalcon的 运行命令： ./install --php-config /usr/local/php/bin/php-config --phpize /usr/local/php/bin/phpize 编译完成之后，提示安装成功。 2、修改php.ini 添加phalcon.so扩展 运行命令： vi /usr/local/php/etc/php.ini 添加内容： extension=\"phalcon.so\" 然后保存，重启php。 3、测试是否安装成功 web目录里新建 test.php var_dump(get_loaded_extensions()); ?> 运行后看到有 phalcon扩展被加载， 即是安装phalcon框架成功。 每天记录一点点，每天提高一点点 all right reserved，powered by Gitbook该文件修订时间： 2019-01-18 21:57:39 "},"php/php-fpm守护进程.html":{"url":"php/php-fpm守护进程.html","title":"php-fpm守护进程","keywords":"","body":"mac php-fpm 守护进程运行 问题是没有开启守护进程运行，php-fpm的时候出现 ready to handle connections … 关闭命令行窗口后又断开了 php-fpm ready to handle connections 解决方法： 1、首先要保证安装的PHP程序没有问题，因为我朋友启动php-fpm，网站的php文件依然可以解析，说明安装的程序没有任何问题。 2、查看php-fpm配置文件，因为php-fpm配置文件有一个选项是： daemonize = yes 后台执行fpm，默认值为yes，如果为了调试可以改为no。在FPM中，可以使用不同的设置来运行多个进程池。 这些设置可以针对每个进程池单独设置。 vi /usr/local/etc/php/7.2/php-fpm.conf 这个是配置文件 但是我查看我朋友的php-fpm.conf配置文件，却发现它的“daemonize = no ”，因此只需要改过来就解决了！ 每天记录一点点，每天提高一点点 all right reserved，powered by Gitbook该文件修订时间： 2019-01-18 21:57:39 "},"php/start-end.html":{"url":"php/start-end.html","title":"start-end","keywords":"","body":"PHP 获取今日、昨日、本周、上周、本月的等等常用的起始时间戳和结束时间戳的时间处理类 link:https://blog.csdn.net/mad_geek/article/details/72726086 每天记录一点点，每天提高一点点 all right reserved，powered by Gitbook该文件修订时间： 2019-01-16 22:25:03 "},"友情链接/blog.html":{"url":"友情链接/blog.html","title":"blog","keywords":"","body":"全栈博客 里边记录了Android，iOS，PHP，Git，Mac，Linux等等 每天记录一点点，每天提高一点点 all right reserved，powered by Gitbook该文件修订时间： 2019-01-18 21:57:39 "},"友情链接/test.html":{"url":"友情链接/test.html","title":"test","keywords":"","body":" To view this video please enable JavaScript, and consider upgrading to a web browser that supports HTML5 video 每天记录一点点，每天提高一点点 all right reserved，powered by Gitbook该文件修订时间： 2019-01-20 22:56:46 "},"GLOSSARY.html":{"url":"GLOSSARY.html","keywords":"","body":"每天记录一点点，每天提高一点点 all right reserved，powered by Gitbook该文件修订时间： 2019-01-20 19:12:54 "}}